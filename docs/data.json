{
    "project": {
        "name": "ember-collect-helper",
        "description": "Ember.computed.collect as a template helper",
        "url": "https://github.com/buschtoens/ember-collect-helper",
        "version": "v0.1.2"
    },
    "files": {
        "addon/helpers/collect.js": {
            "name": "addon/helpers/collect.js",
            "modules": {
                "EmberCollectHelper": 1
            },
            "classes": {
                "CollectHelper": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "EmberCollectHelper": {
            "name": "EmberCollectHelper",
            "submodules": {},
            "elements": {},
            "classes": {
                "CollectHelper": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/helpers/collect.js",
            "line": 8,
            "description": "The `{{collect}}` helper takes a `source` object, a `paths` array and an\noptional `defaultValue`, which is used if a given path cannot be found on the\n`source` object. The `defaultValue` defaults to `null`.\n\n```hbs\n{{collect source paths defaultValue=\"foo\"}}\n```\n\nIf the `source` [is empty](https://www.emberjs.com/api/ember/2.14/namespaces/Ember/methods/isEmpty?anchor=isEmpty),\nthe helper will return an empty array (`[]`), regardless of the `paths` that\nwere specified.\n\nIf a specified path was not found on the `source` object, `defaultValue` is\nput in its place.\n\n```js\nconst source = {\n  foo: 'ember',\n  bar: 'light',\n  qux: {\n    quax: 'table',\n    quuz: 'great'\n  }\n };\n const paths = ['bar', 'qux.quax', 'unknown', 'qux.quuz'];\n```\n\n```hbs\n{{#each (collect source paths defaultValue=\"is\") as |word|}}\n  {{word}}\n{{/each}}\n```\n\n```html\nlight table is great\n```\n\nThe specified `paths` on the `source` object are observed. This means that\nupdating these values on the `source` object will cause the helper to\nrecompute, just as you would expect.\nYou can also replace the `source` object altogether or change the specified\n`paths`. Everything will always stay in sync.\n\nTo allow maximum flexibility, `paths` can also be a string, in which case the\nvalue is returned as is and not wrapped in an array.\nThis means that the following two invocations have different return values:\n\n```js\nconst source = { foo: 'bar' };\nconst arrayPath = ['foo'];\nconst singularPath = 'foo';\n```\n\n```hbs\n{{collect source arrayPath}}    => ['bar']\n{{collect source singularPath}} => 'bar'\n```\n\nThis is especially useful, when you are replacing `{{get}}` with\n`{{collect}}`, but have some surrounding code that still expects the\nunwrapped value for cases where `paths` is not an array, but also just a\nsingle path, as it would be with `{{get}}`.\n\nYou can disable this behavior and make `{{collect}}` always return an array\nby passing `wrapSingular=true`.\n\n```hbs\n{{collect source \"foo\" wrapSingular=true}} => ['bar']\n```",
            "extends": "Ember.Helper"
        }
    },
    "classes": {
        "CollectHelper": {
            "name": "CollectHelper",
            "shortname": "CollectHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EmberCollectHelper",
            "namespace": "",
            "file": "addon/helpers/collect.js",
            "line": 8,
            "description": "The `{{collect}}` helper takes a `source` object, a `paths` array and an\noptional `defaultValue`, which is used if a given path cannot be found on the\n`source` object. The `defaultValue` defaults to `null`.\n\n```hbs\n{{collect source paths defaultValue=\"foo\"}}\n```\n\nIf the `source` [is empty](https://www.emberjs.com/api/ember/2.14/namespaces/Ember/methods/isEmpty?anchor=isEmpty),\nthe helper will return an empty array (`[]`), regardless of the `paths` that\nwere specified.\n\nIf a specified path was not found on the `source` object, `defaultValue` is\nput in its place.\n\n```js\nconst source = {\n  foo: 'ember',\n  bar: 'light',\n  qux: {\n    quax: 'table',\n    quuz: 'great'\n  }\n };\n const paths = ['bar', 'qux.quax', 'unknown', 'qux.quuz'];\n```\n\n```hbs\n{{#each (collect source paths defaultValue=\"is\") as |word|}}\n  {{word}}\n{{/each}}\n```\n\n```html\nlight table is great\n```\n\nThe specified `paths` on the `source` object are observed. This means that\nupdating these values on the `source` object will cause the helper to\nrecompute, just as you would expect.\nYou can also replace the `source` object altogether or change the specified\n`paths`. Everything will always stay in sync.\n\nTo allow maximum flexibility, `paths` can also be a string, in which case the\nvalue is returned as is and not wrapped in an array.\nThis means that the following two invocations have different return values:\n\n```js\nconst source = { foo: 'bar' };\nconst arrayPath = ['foo'];\nconst singularPath = 'foo';\n```\n\n```hbs\n{{collect source arrayPath}}    => ['bar']\n{{collect source singularPath}} => 'bar'\n```\n\nThis is especially useful, when you are replacing `{{get}}` with\n`{{collect}}`, but have some surrounding code that still expects the\nunwrapped value for cases where `paths` is not an array, but also just a\nsingle path, as it would be with `{{get}}`.\n\nYou can disable this behavior and make `{{collect}}` always return an array\nby passing `wrapSingular=true`.\n\n```hbs\n{{collect source \"foo\" wrapSingular=true}} => ['bar']\n```"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "addon/helpers/collect.js",
            "line": 84,
            "description": "The source object whose paths are observed for changes.",
            "itemtype": "property",
            "name": "source",
            "type": "{Object|null}",
            "access": "private",
            "tagname": "",
            "class": "CollectHelper",
            "module": "EmberCollectHelper"
        },
        {
            "file": "addon/helpers/collect.js",
            "line": 93,
            "description": "The paths on `source` to collect values from and observe for changes.",
            "itemtype": "property",
            "name": "paths",
            "type": "{String[]}",
            "default": "[]",
            "access": "private",
            "tagname": "",
            "class": "CollectHelper",
            "module": "EmberCollectHelper"
        },
        {
            "file": "addon/helpers/collect.js",
            "line": 103,
            "itemtype": "property",
            "name": "isSingular",
            "type": "{Boolean}",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "CollectHelper",
            "module": "EmberCollectHelper"
        },
        {
            "file": "addon/helpers/collect.js",
            "line": 111,
            "itemtype": "method",
            "name": "compute",
            "params": [
                {
                    "name": "source",
                    "description": "The object to collect values from",
                    "type": "Object"
                },
                {
                    "name": "paths",
                    "description": "The paths to collect",
                    "type": "String[]"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "defaultValue",
                            "description": "",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "wrapSingular",
                            "description": "",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "If the given `source` is present, returns an array of the\n  collected values in the order that they were specified in `paths`.\n  If the given `source` is empty, returns an empty array (`[]`).",
                "type": "Array"
            },
            "class": "CollectHelper",
            "module": "EmberCollectHelper"
        },
        {
            "file": "addon/helpers/collect.js",
            "line": 131,
            "description": "Updates the `source` object.",
            "itemtype": "method",
            "name": "updateSource",
            "params": [
                {
                    "name": "newSource",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "If the `newSource` actually was different from the old\n   source and thus an update was performed.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "CollectHelper",
            "module": "EmberCollectHelper"
        },
        {
            "file": "addon/helpers/collect.js",
            "line": 151,
            "description": "Updates the `paths` that are collected and observed for changes.\nAlso updates the observers on the `source` object.",
            "itemtype": "method",
            "name": "updatePaths",
            "params": [
                {
                    "name": "newPaths",
                    "description": "",
                    "type": "String[]"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "isSingular",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "If the `newPaths` were actually different from the old\n  paths and thus an update was performed.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "CollectHelper",
            "module": "EmberCollectHelper"
        },
        {
            "file": "addon/helpers/collect.js",
            "line": 184,
            "description": "Called everytime an observed property on the `source` object changes.\nCauses the helper to recomputed its value.",
            "itemtype": "method",
            "name": "observedPathsChanged",
            "access": "private",
            "tagname": "",
            "class": "CollectHelper",
            "module": "EmberCollectHelper"
        },
        {
            "file": "addon/helpers/collect.js",
            "line": 196,
            "description": "Collects the specified `paths` from the `source` object, if present.",
            "itemtype": "method",
            "name": "collectValues",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "defaultValue",
                            "description": "The value to be used when a\n  paths cannot be found on the `source` object. Effectively what you would\n  pass to `Ember.getWithDefault`.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "wrapSingular",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "If the given `source` is present, returns an array of the\n  collected values in the order that they were specified in `paths`.\n  If the given `source` is empty, returns an empty array (`[]`).\n  If paths were not found in `source`, `defaultValue` will be inserted in\n  their place.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "CollectHelper",
            "module": "EmberCollectHelper"
        }
    ],
    "warnings": []
}